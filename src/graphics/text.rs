pub struct BitFont {
    pub(crate) chars: [[u8; 8]; 95], // 95 printable ASCII chars, 8 bytes each (8x8 bitmap)
}

impl BitFont {
    /// Draws a string of text on the screen with smooth scaling applied to each character.
    ///
    /// # Parameters
    /// - `framebuffer`: A mutable slice of `u32` representing the screen's pixel buffer.
    /// - `fb_width`: The width of the framebuffer in pixels.
    /// - `text`: The string of text to draw.
    /// - `x`: The x-coordinate of the top-left corner where the text will start.
    /// - `y`: The y-coordinate of the top-left corner where the text will start.
    /// - `color`: The color of the text in ARGB format.
    /// - `scale`: The scaling factor to apply to each character.
    ///
    /// Each character in the text is drawn using the `BitFont`'s character data, scaled by the
    /// specified `scale` factor. The function ensures that characters are drawn within the bounds
    /// of the framebuffer.
    ///
    /// Characters are spaced horizontally based on the scaled width of each character.
    /// Non-printable characters are skipped.
    pub fn draw_text_smooth_scaled(&self, framebuffer: &mut [u32], fb_width: usize, text: &str, x: i32, y: i32, color: u32, scale: f32) {
        let char_width = (8.0 * scale) as i32;
        let mut current_x = x;

        // Iterate over each character in the text
        for (_char_idx, ch) in text.chars().enumerate() {
            let char_index = (ch as u8).saturating_sub(32) as usize;
            if char_index >= 95 { // Check if character is printable
                continue;
            }

            // Get the character data from the font based on the character index
            let char_data = &self.chars[char_index];

            // Calculate the scaled width and height for the character based on the scale factor
            let scaled_width = (8.0 * scale) as i32;
            let scaled_height = (8.0 * scale) as i32;

            // Iterate over each pixel in the scaled character
            for py in 0..scaled_height {
                for px in 0..scaled_width {
                    // Map back to original 8x8 coordinates
                    let orig_x = (px as f32 / scale).floor() as usize;
                    let orig_y = (py as f32 / scale).floor() as usize;

                    // Check if the original coordinates are within the bounds of the character data
                    if orig_x < 8 && orig_y < 8 {
                        let byte = char_data[orig_y];
                        // Check if the pixel should be drawn (if the bit is set)
                        if (byte >> (orig_x)) & 1 != 0 {
                            // Calculate the screen coordinates based on the current position and scale
                            let screen_x = current_x + px;
                            let screen_y = y + py;

                            // Check if the screen coordinates are within the bounds of the framebuffer
                            if screen_x >= 0 && screen_y >= 0 &&
                                (screen_x as usize) < fb_width &&
                                (screen_y as usize * fb_width + screen_x as usize) < framebuffer.len() {

                                // Set the pixel color in the framebuffer
                                framebuffer[screen_y as usize * fb_width + screen_x as usize] = color;
                            }
                        }
                    }
                }
            }
            current_x += char_width;
        }
    }
}

pub fn get_font_data() -> [[u8; 8]; 95] {
    let font_data: [[u8; 8]; 95] = [
        // Space (32)
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        // ! (33)
        [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],
        // " (34)
        [0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        // # (35)
        [0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00],
        // $ (36)
        [0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00],
        // % (37)
        [0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00],
        // & (38)
        [0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00],
        // ' (39)
        [0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00],
        // ( (40)
        [0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00],
        // ) (41)
        [0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00],
        // * (42)
        [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],
        // + (43)
        [0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00],
        // , (44)
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x00],
        // - (45)
        [0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00],
        // . (46)
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
        // / (47)
        [0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00],
        // 0 (48)
        [0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00],
        // 1 (49)
        [0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00],
        // 2 (50)
        [0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00],
        // 3 (51)
        [0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00],
        // 4 (52)
        [0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00],
        // 5 (53)
        [0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00],
        // 6 (54)
        [0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00],
        // 7 (55)
        [0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00],
        // 8 (56)
        [0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00],
        // 9 (57)
        [0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00],
        // : (58)
        [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00],
        // ; (59)
        [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x06, 0x00],
        // < (60)
        [0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00],
        // = (61)
        [0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00],
        // > (62)
        [0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00],
        // ? (63)
        [0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00],
        // @ (64)
        [0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00],
        // A (65)
        [0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],
        // B (66)
        [0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00],
        // C (67)
        [0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00],
        // D (68)
        [0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00],
        // E (69)
        [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00],
        // F (70)
        [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00],
        // G (71)
        [0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00],
        // H (72)
        [0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],
        // I (73)
        [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        // J (74)
        [0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00],
        // K (75)
        [0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00],
        // L (76)
        [0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00],
        // M (77)
        [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],
        // N (78)
        [0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00],
        // O (79)
        [0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00],
        // P (80)
        [0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00],
        // Q (81)
        [0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00],
        // R (82)
        [0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00],
        // S (83)
        [0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00],
        // T (84)
        [0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        // U (85)
        [0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00],
        // V (86)
        [0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
        // W (87)
        [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
        // X (88)
        [0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00],
        // Y (89)
        [0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00],
        // Z (90)
        [0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00],
        // [ (91)
        [0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00],
        // \ (92)
        [0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00],
        // ] (93)
        [0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00],
        // ^ (94)
        [0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00],
        // _ (95)
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
        // ` (96)
        [0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
        // a (97)
        [0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00],
        // b (98)
        [0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00],
        // c (99)
        [0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00],
        // d (100)
        [0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00],
        // e (101)
        [0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00],
        // f (102)
        [0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00],
        // g (103)
        [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F],
        // h (104)
        [0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00],
        // i (105)
        [0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        // j (106)
        [0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E],
        // k (107)
        [0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00],
        // l (108)
        [0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        // m (109)
        [0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00],
        // n (110)
        [0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00],
        // o (111)
        [0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00],
        // p (112)
        [0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F],
        // q (113)
        [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78],
        // r (114)
        [0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00],
        // s (115)
        [0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00],
        // t (116)
        [0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00],
        // u (117)
        [0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00],
        // v (118)
        [0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
        // w (119)
        [0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00],
        // x (120)
        [0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00],
        // y (121)
        [0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F],
        // z (122)
        [0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00],
        // { (123)
        [0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00],
        // | (124)
        [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],
        // } (125)
        [0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00],
        // ~ (126)
        [0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    ];
    font_data
}